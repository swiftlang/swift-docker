diff --git a/swift/utils/build-script-impl b/swift/utils/build-script-impl
index 16e05052609..7ab8cebfab8 100755
--- a/swift/utils/build-script-impl
+++ b/swift/utils/build-script-impl
@@ -2622,6 +2622,7 @@ for host in "${ALL_HOSTS[@]}"; do
                     echo "Cleaning the libdispatch build directory"
                     call rm -rf "${LIBDISPATCH_BUILD_DIR}"
                   fi
+                  call ln -sf "${SWIFT_BUILD_PATH}/lib/swift" "${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib"
 
                   cmake_options=(
                     -DENABLE_SWIFT=YES
diff --git a/swift/utils/swift_build_support/swift_build_support/cmake.py b/swift/utils/swift_build_support/swift_build_support/cmake.py
index bfb69965890..b5e9f5349c2 100644
--- a/swift/utils/swift_build_support/swift_build_support/cmake.py
+++ b/swift/utils/swift_build_support/swift_build_support/cmake.py
@@ -153,10 +153,8 @@ class CMake(object):
             toolchain_path = product.native_toolchain_path(args.host_target)
             cmake_swiftc_path = os.getenv('CMAKE_Swift_COMPILER',
                                           os.path.join(toolchain_path, 'bin', 'swiftc'))
-            define("CMAKE_C_COMPILER:PATH", os.path.join(toolchain_path,
-                                                         'bin', 'clang'))
-            define("CMAKE_CXX_COMPILER:PATH", os.path.join(toolchain_path,
-                                                           'bin', 'clang++'))
+            define("CMAKE_C_COMPILER:PATH", toolchain.cc)
+            define("CMAKE_CXX_COMPILER:PATH", toolchain.cxx)
             define("CMAKE_Swift_COMPILER:PATH", cmake_swiftc_path)
         else:
             cmake_swiftc_path = os.getenv('CMAKE_Swift_COMPILER', toolchain.swiftc)
diff --git a/swift/utils/swift_build_support/swift_build_support/products/product.py b/swift/utils/swift_build_support/swift_build_support/products/product.py
index 274b6037305..bf0f7fcf671 100644
--- a/swift/utils/swift_build_support/swift_build_support/products/product.py
+++ b/swift/utils/swift_build_support/swift_build_support/products/product.py
@@ -212,7 +212,7 @@ class Product(object):
         if self.args.cross_compile_hosts:
             if self.is_darwin_host(host_target):
                 install_destdir = self.host_install_destdir(host_target)
-            else:
+            elif self.args.cross_compile_append_host_target_to_destdir:
                 install_destdir = os.path.join(install_destdir, self.args.host_target)
         return targets.toolchain_path(install_destdir,
                                       self.args.install_prefix)
diff --git a/swift/utils/swift_build_support/swift_build_support/products/swift_testing.py b/swift/utils/swift_build_support/swift_build_support/products/swift_testing.py
index 324d1a77eea..e88601a8701 100644
--- a/swift/utils/swift_build_support/swift_build_support/products/swift_testing.py
+++ b/swift/utils/swift_build_support/swift_build_support/products/swift_testing.py
@@ -13,6 +13,9 @@
 import os
 
 from build_swift.build_swift.versions import Version
+from ..host_specific_configuration \
+    import HostSpecificConfiguration
+from ..targets import StdlibDeploymentTarget
 
 from . import cmake_product
 from . import product
@@ -115,6 +117,22 @@ class SwiftTestingCMakeShim(cmake_product.CMakeProduct):
         # FIXME: If we build macros for the builder, specify the path.
         self.cmake_options.define('SwiftTesting_MACRO', 'NO')
 
+        if host_target.startswith('android') and self.is_cross_compile_target(host_target):
+            host_config = HostSpecificConfiguration(host_target, self.args)
+            self.cmake_options.extend(host_config.cmake_options)
+            flags = '-target %s-unknown-linux-android%s ' % (self.args.android_arch,
+                                                             self.args.android_api_level)
+
+            flags += '-resource-dir %s/lib/swift ' % (
+                     self.host_install_destdir(host_target) + self.args.install_prefix)
+
+            ndk_path = StdlibDeploymentTarget.get_target_for_name(host_target).platform.ndk_toolchain_path(self.args)
+            flags += '-sdk %s/sysroot ' % (ndk_path)
+            flags += '-tools-directory %s/bin' % (ndk_path)
+            self.cmake_options.define('CMAKE_Swift_FLAGS', flags)
+            self.cmake_options.define('CMAKE_CXX_COMPILER_WORKS', 'True')
+            self.cmake_options.define('CMAKE_FIND_ROOT_PATH', self.args.cross_compile_deps_path)
+
         self.generate_toolchain_file_for_darwin_or_linux(
             host_target, override_macos_deployment_version=override_deployment_version)
         self.build_with_cmake([], self.args.build_variant, [],
diff --git a/swift-corelibs-foundation/CMakeLists.txt b/swift-corelibs-foundation/CMakeLists.txt
index 7f290d16..95366592 100644
--- a/swift-corelibs-foundation/CMakeLists.txt
+++ b/swift-corelibs-foundation/CMakeLists.txt
@@ -51,6 +51,7 @@ if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows)
     endif()
 endif()
 
+set(CMAKE_SHARED_LINKER_FLAGS "")
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
diff --git a/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake b/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake
index 468dc61..a90ae3d 100644
--- a/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake
+++ b/swift-corelibs-xctest/cmake/modules/PlatformInfo.cmake
@@ -2,6 +2,10 @@
 set(print_target_info_invocation "${CMAKE_Swift_COMPILER}" -print-target-info)
 if(CMAKE_Swift_COMPILER_TARGET)
   list(APPEND print_target_info_invocation -target ${CMAKE_Swift_COMPILER_TARGET})
+else()
+  set(arg_list ${CMAKE_Swift_FLAGS})
+  separate_arguments(arg_list)
+  list(APPEND print_target_info_invocation ${arg_list})
 endif()
 execute_process(COMMAND ${print_target_info_invocation} OUTPUT_VARIABLE target_info_json)
 message(CONFIGURE_LOG "Swift Target Info: ${print_target_info_invocation}\n"
diff --git a/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake b/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake
index cbdfc2a..bb4121d 100644
--- a/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake
+++ b/swift-foundation/cmake/modules/SwiftFoundationSwiftSupport.cmake
@@ -37,6 +37,10 @@ function(_swift_foundation_install_target module)
     set(module_triple_command "${CMAKE_Swift_COMPILER}" -print-target-info)
     if(CMAKE_Swift_COMPILER_TARGET)
       list(APPEND module_triple_command -target ${CMAKE_Swift_COMPILER_TARGET})
+    else()
+      set(arg_list ${CMAKE_Swift_FLAGS})
+      separate_arguments(arg_list)
+      list(APPEND module_triple_command ${arg_list})
     endif()
     execute_process(COMMAND ${module_triple_command} OUTPUT_VARIABLE target_info_json)
     string(JSON module_triple GET "${target_info_json}" "target" "moduleTriple")
diff --git a/swift-testing/CMakeLists.txt b/swift-testing/CMakeLists.txt
index 1be9a4b..bd7b1bd 100644
--- a/swift-testing/CMakeLists.txt
+++ b/swift-testing/CMakeLists.txt
@@ -28,6 +28,7 @@ list(APPEND CMAKE_MODULE_PATH
   ${PROJECT_SOURCE_DIR}/cmake/modules
   ${PROJECT_SOURCE_DIR}/cmake/modules/shared)
 
+set(CMAKE_SHARED_LINKER_FLAGS "")
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
diff --git a/swift-testing/cmake/modules/PlatformInfo.cmake b/swift-testing/cmake/modules/PlatformInfo.cmake
index 94c60ef..ab8a491 100644
--- a/swift-testing/cmake/modules/PlatformInfo.cmake
+++ b/swift-testing/cmake/modules/PlatformInfo.cmake
@@ -9,6 +9,10 @@
 set(print_target_info_invocation "${CMAKE_Swift_COMPILER}" -print-target-info)
 if(CMAKE_Swift_COMPILER_TARGET)
   list(APPEND print_target_info_invocation -target ${CMAKE_Swift_COMPILER_TARGET})
+else()
+  set(arg_list ${CMAKE_Swift_FLAGS})
+  separate_arguments(arg_list)
+  list(APPEND print_target_info_invocation ${arg_list})
 endif()
 execute_process(COMMAND ${print_target_info_invocation} OUTPUT_VARIABLE target_info_json)
 message(CONFIGURE_LOG "Swift Target Info: ${print_target_info_invocation}\n"
diff --git a/swift-testing/cmake/modules/TargetTriple.cmake b/swift-testing/cmake/modules/TargetTriple.cmake
index e087cc4..02f3a95 100644
--- a/swift-testing/cmake/modules/TargetTriple.cmake
+++ b/swift-testing/cmake/modules/TargetTriple.cmake
@@ -10,6 +10,10 @@
 set(SWT_TARGET_INFO_COMMAND "${CMAKE_Swift_COMPILER}" -print-target-info)
 if(CMAKE_Swift_COMPILER_TARGET)
   list(APPEND SWT_TARGET_INFO_COMMAND -target ${CMAKE_Swift_COMPILER_TARGET})
+else()
+      set(arg_list ${CMAKE_Swift_FLAGS})
+      separate_arguments(arg_list)
+      list(APPEND SWT_TARGET_INFO_COMMAND ${arg_list})
 endif()
 execute_process(COMMAND ${SWT_TARGET_INFO_COMMAND} OUTPUT_VARIABLE SWT_TARGET_INFO_JSON)
 string(JSON SWT_TARGET_TRIPLE GET "${SWT_TARGET_INFO_JSON}" "target" "unversionedTriple")
